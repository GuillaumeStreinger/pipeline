name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --no-restore --configuration Release
  
  measure:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run SonarScanner via Docker
        run: |
          docker pull sonarsource/sonar-scanner-cli
          docker run --rm \
          -e SONAR_HOST_URL=${{ secrets.SONARQUBE_HOST_URL }} \
          -e SONAR_LOGIN=${{ secrets.SONARQUBE_TOKEN }} \
          -v $(pwd):/usr/src \
          sonarsource/sonar-scanner-cli \
          -Dsonar.projectKey=MyDotNetApp \
          -Dsonar.sources=. \
          -Dsonar.language=cs

  document:
    name: Generate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Sandcastle Tools
        run: dotnet tool install --global Sandcastle.Tools

      - name: Build Sandcastle Documentation
        run: shfb build MyDocumentationProject.shfbproj

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run NUnit Tests
        run: |
          dotnet test --configuration Release --logger "trx;LogFileName=test-results.trx"

      - name: Publish Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: '**/test-results.trx'

  secure:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Dependency-Track Server
        run: |
          docker pull dependencytrack/bundled
          docker run -d --name dependency-track -p 8080:8080 dependencytrack/bundled
          echo "Dependency-Track running on http://localhost:8080"

  deploy:
    name: Deploy to Octopus Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy with Octopus CLI
        run: |
          docker pull octopusdeploy/octo
          docker run --rm \
            -e OCTOPUS_SERVER=${{ secrets.OCTOPUS_SERVER }} \
            -e OCTOPUS_APIKEY=${{ secrets.OCTOPUS_APIKEY }} \
            octopusdeploy/octo push --package=myapp.zip
