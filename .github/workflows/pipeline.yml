name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'

      - name: Restore dependencies
        run: dotnet restore MyDotNetApp.sln

      - name: Build solution
        run: dotnet build MyDotNetApp.sln --configuration Release

  measure:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    services:
      sonar:
        image: sonarqube:community
        ports:
          - 9000:9000
        options: >-
          --health-cmd="curl -f http://localhost:9000/api/system/status || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
          SONAR_WEB_CONTEXT: "/"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'

      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "PATH=$HOME/.dotnet/tools:$PATH" >> $GITHUB_ENV

      - name: Wait for SonarQube to be ready
        run: |
          echo "Waiting for SonarQube to be ready..."
          until curl -s http://localhost:9000/api/system/status | grep '"status":"UP"'; do
            sleep 5
          done
          echo "SonarQube is ready."

      - name: Run SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"MyDotNetApp" \
            /d:sonar.host.url=http://localhost:9000 \
            /d:sonar.login=${{ secrets.SONAR_TOKEN }}
          dotnet build MyDotNetApp.sln --configuration Release
          dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}
          
  document:
    name: Generate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install .NET 8.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Install DocFX as a .NET Global Tool
        run: |
          dotnet tool install -g docfx
          echo "PATH=$HOME/.dotnet/tools:$PATH" >> $GITHUB_ENV

      - name: Create docfx.json
        run: |
          echo '{
            "metadata": [
              {
                "src": [
                  { "files": ["MyDotNetApp/**/*.csproj"] }
                ],
                "dest": "api"
              }
            ],
            "build": {
              "content": [
                { "files": ["api/**"] },
                { "files": ["MyDotNetApp/Articles/**"] },
                { "files": ["MyDotNetApp/toc.yml"] }
              ],
              "dest": "_site"
            }
          }' > docfx.json

      - name: Verify Documentation Input
        run: |
          ls -R
          cat docfx.json

      - name: Generate Documentation with DocFX
        run: |
          docfx build

      - name: Upload Documentation Artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: _site/

  test:
    name: Run NUnit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'

      - name: Restore dependencies
        run: dotnet restore MyDotNetApp.sln

      - name: Build solution
        run: dotnet build MyDotNetApp.sln --configuration Release

      - name: Run NUnit Tests
        run: |
          dotnet test MyDotNetApp.sln --configuration Release --logger "trx;LogFileName=test-results.trx"

      - name: Publish Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: '**/test-results.trx'

  secure:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Dependency-Track Server
        run: |
          docker pull dependencytrack/bundled
          docker run -d --name dependency-track -p 8080:8080 dependencytrack/bundled
          echo "Dependency-Track running on http://localhost:8080"

  deploy:
    name: Deploy to Octopus Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy with Octopus CLI
        run: |
          docker pull octopusdeploy/octo
          docker run --rm \
            -e OCTOPUS_SERVER=${{ secrets.OCTOPUS_SERVER }} \
            -e OCTOPUS_APIKEY=${{ secrets.OCTOPUS_APIKEY }} \
            octopusdeploy/octo push --package=myapp.zip
