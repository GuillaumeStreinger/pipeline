name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'

      - name: Restore dependencies
        run: dotnet restore MyDotNetApp.sln

      - name: Build solution
        run: dotnet build MyDotNetApp.sln --configuration Release

  measure:
    name: SonarCloud Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'

      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "PATH=$HOME/.dotnet/tools:$PATH" >> $GITHUB_ENV

      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"GuillaumeStreinger_pipeline" \
            /o:"guillaumestreinger" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login=${{ secrets.SONAR_TOKEN }}
          dotnet build MyDotNetApp.sln --configuration Release
          dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}

  document:
    name: Generate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install .NET 8.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Install DocFX as a .NET Global Tool
        run: |
          dotnet tool install -g docfx
          echo "PATH=$HOME/.dotnet/tools:$PATH" >> $GITHUB_ENV

      - name: Create docfx.json
        run: |
          echo '{
            "metadata": [
              {
                "src": [
                  { "files": ["MyDotNetApp/**/*.csproj"] }
                ],
                "dest": "api"
              }
            ],
            "build": {
              "content": [
                { "files": ["api/**"] },
                { "files": ["MyDotNetApp/Articles/**"] },
                { "files": ["MyDotNetApp/toc.yml"] }
              ],
              "dest": "_site"
            }
          }' > docfx.json

      - name: Verify Documentation Input
        run: |
          ls -R
          cat docfx.json

      - name: Generate Documentation with DocFX
        run: |
          docfx build

      - name: Upload Documentation Artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: _site/

  test:
    name: Run NUnit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'

      - name: Restore dependencies
        run: dotnet restore MyDotNetApp.sln

      - name: Build solution
        run: dotnet build MyDotNetApp.sln --configuration Release

      - name: Run NUnit Tests
        run: |
          dotnet test MyDotNetApp.sln --configuration Release --logger "trx;LogFileName=test-results.trx"

      - name: Publish Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: '**/test-results.trx'

  secure:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install CycloneDX
        run: |
          dotnet tool install --global CycloneDX
          echo "PATH=$HOME/.dotnet/tools:$PATH" >> $GITHUB_ENV
  
      - name: Generate SBOM
        run: |
          dotnet CycloneDX MyDotNetApp.sln --output . --filename sbom.json --json
  
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json

  deploy:
    name: Deploy to Octopus Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get remove -y docker docker-engine docker.io containerd runc
          sudo apt-get install -y \
            ca-certificates \
            curl \
            gnupg \
            lsb-release
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
  
      - name: Pull Octopus CLI Docker Image
        run: |
          docker pull octopusdeploy/octo
  
      - name: Push Package to Octopus
        env:
          OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
        run: |
          docker run --rm \
            -v $(pwd):/src \
            octopusdeploy/octo \
            push --server $OCTOPUS_URL \
                 --apiKey $OCTOPUS_API_KEY \
                 --package /src/myapp.zip

        
      - name: Create and Deploy Release
        env:
          OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
        run: |
          docker run --rm \
            octopusdeploy/octo \
            create-release --server $OCTOPUS_URL \
                           --apiKey $OCTOPUS_API_KEY \
                           --project MyProject \
                           --releaseNumber 1.0.$GITHUB_RUN_NUMBER \
                           --deployTo Production
